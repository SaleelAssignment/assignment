Q1. Execute the following sql statements.

drop table if exists item;
drop table if exists item_ordered;

create table item (itemID int, itemName varchar(20));

insert into item values(1, 'Sports Shoes');
insert into item values(2, 'Casual Shoes');
insert into item values(3, 'T-shirts');
insert into item values(4, 'Jeans');
insert into item values(5, 'Jackets');
insert into item values(6, 'Sweaters');
insert into item values(7, 'Watches');

create table item_ordered(orderID int, itemID int, orderDate date, orderTime time, qty int);

Insert data in item_ordered(orderID, itemID, and qty) table, write a trigget to check weather the entered itemID is presend in item table, if itemID is not present in the item table then display message "Item not found in item table!" or else the record must be inseerted in item_ordered table.

Note:- orderDate and orderTime must be systemDate and systemTime.

Solution  - 

drop trigger if exists insert_in_item_ordered;
delimiter $$

create trigger insert_in_item_ordered before insert on item_ordered for each row
begin
	declare x int;
	set new.orderDate := current_date();
	set new.orderTime := current_time();
	
	select itemID into x from item where itemID = new.itemID;
	if x is null then
	   signal sqlstate '42000' set message_text = "Item not found in item table!";
	end if;
end $$

delimiter ;


----------------------------------------------------------------------------------------------------------------

Q2. Write a trigger, to check itemID present or not, if the itemId is present raise an error "itemID already present, cannot insert duplicate itemID."


Solution  - 

drop trigger if exists itemID_primaryKey;
delimiter $$

create trigger itemID_primaryKey after insert on item for each row
begin
	declare x int;
	select itemId into x from item where itemId = new.itemID;
	if x is null then
		signal sqlstate '42000' set message_text = 'itemID already present, cannot insert duplicate itemID.';
	end if;
end $$   
delimiter ;
----------------------------------------------------------------------------------------------------------------

Q3. Write a trigget, if anyone tries to change item name, it should raise an error and print a message "Product name is read-only and it can not be changed."

Solution  - 

drop trigger if exists readOnlyItemName;
delimiter $$

create trigger readOnlyItemName after update on item for each row
begin
	signal sqlstate '42000' set message_text = 'Product name is read-only and it can not be changed.';
end $$   
delimiter ;

----------------------------------------------------------------------------------------------------------------

Q4. Execute the following sql statements.

drop table if exists warehouse;
CREATE TABLE warehouse (warehouse_id int, warehouse_name varchar(255), channel_id int);

insert into warehouse values (143, 'AC Warehouse', 1);
insert into warehouse values (156, 'National', 2);
insert into warehouse values (231, 'Global', 3);
insert into warehouse values (254, 'NON-STOP', 2);
insert into warehouse values (321, 'Migrant System', 2);
insert into warehouse values (464, 'Blaze', 1);

Solution  - 

drop trigger if exists warehouse;

----------------------------------------------------------------------------------------------------------------


Q5. Execute the following sql statements.

DROP TABLE IF EXISTS item_in_warehouse;

CREATE TABLE item_in_warehouse(id INT PRIMARY KEY AUTO_INCREMENT, item_id INT, warehouse_id INT, minimum_stock INT, ROL INT, total_stock INT);

Insert data only in (item_id, warhouse_id, and total_stock ) Write a trigger to check weather item_id and warehouse_id is present in item and warehouse table, if not give appropriate message.


Solution  - 

drop trigger if exists insert_item_in_warehouse;
delimiter $$

create trigger insert_item_in_warehouse before insert on item_in_warehouse for each row
begin
	declare itemNotFound bool default True;
	declare warehouseNotFound bool default True;
	
	select False into itemNotFound from item where itemid = new.item_id;
	select False into warehouseNotFound from warehouse where warehouse_id = new.warehouse_id;

	if itemNotFound then
		signal sqlstate '42000' set message_text = 'Item not found!';
	end if;
	
	if warehouseNotFound then
		signal sqlstate '42000' set message_text = 'Warehouse not found! ';
	end if;
	
end $$   
delimiter ;

----------------------------------------------------------------------------------------------------------------

Q6. Execute the following sql statements.

DROP TABLE IF EXISTS item_in_warehouse;
CREATE TABLE item_in_warehouse(id INT PRIMARY KEY AUTO_INCREMENT, item_id INT, warehouse_id INT, minimum_stock INT, ROL INT, total_stock INT);

Insert data only in (item_id, warhouse_id, and total_stock ) Write a trigger to calculate minimum_stock, and ROL.
a) minimum_stock must be 50% of total_stock, and
b) ROL must be 25% of minimum_stock

Solution  - 

drop trigger if exists calculate_minimum_stock_ROL;

delimiter $$

create trigger calculate_minimum_stock_ROL before insert on item_in_warehouse for each row
begin
	declare _minimum_stock int;
	declare _ROL int;
	
	set _minimum_stock := NEW.stock / 2;
	set _ROL := _minimum_stock * .25;
	set NEW.minimum_stock := _minimum_stock;
	set NEW.ROL := _ROL;
	
end $$   
delimiter ;


********************************************* BANK ****************************************************************

Q1. Execute the following sql statements.

drop table if exists customer_Account;
create table customer_Account(accountID varchar(20), customerName varchar(20), account_Type varchar(20), openDate date, phone_number varchar(12));


Insert data in customer_Account(customerName, account_Type, openDate, and phone_number) table, write a trigget to autoIncrement accountID, if account_Type is "saving' then accountID must be 'S/A-1' and if account_Type is "current" then accountID must be 'C/A-1', if the account_Type is other than "saving" and "current" then raise an error and print message "Invalid Account Type!" or else increment accountID by 1 and save.


Solution  - 

drop trigger if exists customer_AccountID;
delimiter $$

create trigger customer_AccountID before insert on customer_account for each row
begin
	declare x int;
	
	select max(cast(substr(accountID, 5) AS UNSIGNED)) + 1 into x from customer_account where account_Type = new.account_Type;
	
	if x is null then
		if new.account_Type = 'saving' then
			set new.accountID = concat('S/A-', 1);
		ELSEIF new.account_Type = 'current' then
			set new.accountID = concat('C/A-', 1);
		else
			signal sqlstate '42000' set message_text = "Invalid Account Type!";
		end if;
	else
		if new.account_Type = 'saving' then
			set new.accountID = concat('S/A-', x);
		else
			set new.accountID = concat('C/A-', x);
			end if;
	end if;
end $$

delimiter ;

----------------------------------------------------------------------------------------------------------------

Q2. Write a trigger, if we insert phone_number of the customer (for e.g. 9850884228) then is should store as 9850xxxxxx in the customer_account table. 

Solution  - 

drop trigger if exists customer_phone;
delimiter $$

create trigger customer_phone before insert on customer_account for each row
begin
	SET new.phone_number := rpad(left(new.phone_number, 4), 10, 'x');
	
end $$

delimiter ;

----------------------------------------------------------------------------------------------------------------

Q3. Write a trigger, if we insert future date it should raise an exception and print  'Invalid Opening Date!' message.

Note:- openDate must be till today only.

Solution  - 

drop trigger if exists open_date;
delimiter $$

create trigger open_date before insert on customer_account for each row
begin
	if new.opendate > curDate() then
		signal sqlstate '42000' SET message_text = 'Invalid Opening Date!';
	end if;
end $$

delimiter ;
----------------------------------------------------------------------------------------------------------------

Q4.  Execute the following sql statements.

drop table if exists credit_card;
create table credit_card(accountID varchar(20), issueDate date, pin int, isactive bool);

insert data in credit_card table, writer a trigger to validate accountID, if accountID is not presend in customer_Account table then raise an error and print 'Invalid Account Number, card cannot be issued! "Contact customer care!"' or else insert data in credit_card table.


Solution  - 

drop trigger if exists issue_card;
delimiter $$

create trigger issue_card before insert on credit_card for each row
begin
	declare x varchar(20);
	select  accountID into x from customer_Account where accountID = new.accountID;
	if x is null then
		signal sqlstate '42000' set message_text = 'Invalid Account Number, card cannot be issued! "Contact customer care!"';
	end if;
end $$

delimiter ;

----------------------------------------------------------------------------------------------------------------

Q5. Write a stored procedure (named showCustomerAccount) than piints all customer customer_account details.

Solution  - 

drop procedure if exists showCustomerAccount;
delimiter $$

create procedure showCustomerAccount()
begin
	select * from customer_Account;
end $$

delimiter ;

----------------------------------------------------------------------------------------------------------------

