1. Find the Employee with the Highest Salary.

2. Find Employees Who Earn More Than the Company’s Average Salary.

3. Find Employees Working in the Same Departments as ‘John Doe’.

4. Find Employees Who Earn More Than the Lowest Salary in Department 20

5. Find Customers Who Have Placed at Least One Order.

6. Find Employees Who Do Not Earn the Maximum Salary.

7. Find Customers Who Have Not Placed Any Orders.

8. Find Employees Who Earn the Lowest Salary in Their Department.

















-----------------------------
Create a stored procedure GetAllDepartments() that retrieves all records from the departments table.

Create a stored procedure CountEmployeesByDepartment(IN dept_id INT, OUT total INT) that returns the number of employees in a specific department.

Create a stored procedure GetProductDetails(IN product_id INT) that returns details of a specific product.

Create a stored procedure AddNewProduct(IN name VARCHAR(100), IN price DECIMAL(10,2), IN stock INT) that inserts a new product into the products table.

Create a stored procedure UpdateProductStock(IN product_id INT, IN new_stock INT) that updates the stock of a product.

Create a stored procedure GetHighSalaryEmployees(IN min_salary DECIMAL(10,2)) that retrieves employees with salaries above min_salary.

Create a stored procedure PromoteEmployee(IN emp_id INT) that increases an employee’s salary by 10% if they have worked for more than 5 years.

Create a stored procedure CalculateTotalSales(OUT total_sales DECIMAL(10,2)) that calculates total sales from the orders table.

Create a stored procedure TransferFunds(IN from_acc INT, IN to_acc INT, IN amount DECIMAL(10,2)) that transfers funds between two accounts and rolls back if the balance is insufficient.

Create a stored procedure AssignBonusToEmployees(IN bonus_amount DECIMAL(10,2)) that adds a bonus amount to all employees with a salary below 50000.

Create a stored procedure CalculateEmployeeBonuses() that iterates over each employee and increases their salary based on their performance rating using a CURSOR.

Create a stored procedure ProcessMonthlySalaries() that credits employee salaries and ensures all transactions are committed successfully using TRANSACTIONS.

Create a stored procedure DeleteInactiveUsers(IN months INT) that deletes users who have not logged in for months using a CURSOR.

Create a stored procedure GenerateCustomerReport(IN start_date DATE, IN end_date DATE) that generates a report of customer activity within a given date range.

Create a stored procedure GetEmployeesByRole(IN job_title VARCHAR(100)) that retrieves employees with a specific job title.

Create a stored procedure GetTotalOrderValueByCustomer(IN customer_id INT, OUT total DECIMAL(10,2)) that calculates the total order value for a customer.

Create a stored procedure DeactivateUser(IN user_id INT) that updates a user’s status to 'Inactive'.

Create a stored procedure GetTopSellingProduct(OUT product_name VARCHAR(100)) that retrieves the best-selling product.

Create a stored procedure UpdateCustomerAddress(IN cust_id INT, IN new_address VARCHAR(255)) that updates the customer's address.


Create a stored procedure CalculateDiscount(IN order_id INT, OUT final_price DECIMAL(10,2)) that applies a discount based on the total order value.

Create a stored procedure DeleteOldOrders(IN months INT) that deletes orders older than the given number of months.

Create a stored procedure UpdateProductPriceByCategory(IN category VARCHAR(100), IN percentage DECIMAL(5,2)) that increases the price of all products in a category by a percentage.

Create a stored procedure CalculateLoanInterest(IN loan_id INT, OUT interest_amount DECIMAL(10,2)) that calculates interest on a loan.

Create a stored procedure ListCustomersByCity(IN city_name VARCHAR(100)) that retrieves all customers from a specific city.

Triggers

1. Automatically modifies data before inserting it into the table.

2. Prevents salaries from being decreased.

3. Prevents deletion of certain employees.

4. Stores deleted records in an archive table.

5. Automatically formats email addresses to lowercase before inserting.

6. Assigns a default role to a new user if none is provided.

7. Prevents users from changing their email address.

8. Logs old and new usernames when they are changed.

9. Prevents deletion of admin users.

10. Moves deleted orders to an archive table.

11. Automatically sets a default membership type for new users.



